/*
* NLP Architect Jenkinsfile
*/

def createVirtualEnv(String name) {
    sh "python3 -m venv .${name}"
}
 
def executeIn(String environment, String script) {
    sh "source ${environment}/bin/activate && " + script
}

pipeline {
    agent {
        node {
                label 'metal-node'
            }
    }
    options {
        timestamps()
    }
    stages {
        stage('Checkout') {
            steps {
                deleteDir()
                checkout scm
            }
        }
        stage('Build environment') {
            steps {
                createVirtualEnv 'venv'
                executeIn 'venv', 'pip3 install -U pip setuptools'
                executeIn 'venv', 'pip3 install -U -e .[all,dev]'
                executeIn 'venv', 'python -m spacy download en'
            }
        }
        stage('Tests') {
            steps {
                executeIn 'venv', 'pytest ./ -rs -v -n 20 --dist=loadfile --cov=nlp_architect --junit-xml=pytest_unit.xml'
            }
            post {
                always {
                    junit 'pytest_unit.xml'
                }
                failure {
                    script {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('flake8') {
            steps {
                executeIn 'venv', './scripts/check_flake.sh'
            }
            post {
                failure {
                    script {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('Code quality') {
            steps {
                executeIn 'venv', './scripts/check_pylint.sh'
            }
            post {
                failure {
                    script {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('code style') {
            steps {
                executeIn 'venv', './scripts/check_black.sh'
            }
            post {
                failure {
                    script {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
    post {
        aborted {
            script {
                currentBuild.result = 'FAILURE'
            }
        }
        failure {
            script {
                currentBuild.result = 'FAILURE'
            }
        }
        always {
            deleteDir()
        }
        cleanup {
            deleteDir()
        }
    }
}
