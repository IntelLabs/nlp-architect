/*
* NLP Architect Jenkinsfile
*/

pipeline {
    agent {
        node {
                label 'metal-node'
            }
    }
    options {
        timestamps()
    }
    stages {
        stage('Checkout') {
            steps {
                deleteDir()
                checkout scm
            }
        }
        stage('Build environment') {
            steps {
                sh 'python3 -m venv .nlp_architect_env'
                sh """
                . .nlp_architect_env/bin/activate
                pip3 install -U pip setuptools h5py
                pip3 install -U -e .[all,dev]
                python -m spacy download en
                """
            }
        }
        stage('Validation') {
            parallel {
                stage('Tests') {
                    steps {
                        sh """
                        . .nlp_architect_env/bin/activate
                        export LC_ALL=en_US.UTF-8
                        export LANG=en_US.UTF-8
                        pytest ./ -rs -v -n 20 --dist=loadfile --cov=nlp_architect --junit-xml=pytest_unit.xml
                        """
                    }
                    post {
                        always {
                            junit 'pytest_unit.xml'
                        }
                        failure {
                            script {
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    }
                }
                stage('code quality') {
                    steps {
                        sh """
                        . .nlp_architect_env/bin/activate
                        ./scripts/check_flake.sh
                        ./scripts/check_pylint.sh
                        """
                    }
                    post {
                        failure {
                            script {
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    }
                }
                stage('code style') {
                    steps {
                        sh """
                        . .nlp_architect_env/bin/activate
                        ./scripts/check_black.sh
                        """
                    }
                    post {
                        failure {
                            script {
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        aborted {
            script {
                currentBuild.result = 'FAILURE'
            }
        }
        failure {
            script {
                currentBuild.result = 'FAILURE'
            }
        }
        always {
            deleteDir()
        }
        cleanup {
            deleteDir()
        }
    }
}